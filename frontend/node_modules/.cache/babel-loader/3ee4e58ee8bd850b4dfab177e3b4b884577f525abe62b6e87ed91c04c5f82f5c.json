{"ast":null,"code":"var _jsxFileName = \"D:\\\\DATT Badminton shop\\\\Thuc-tap-doanh-nghiep\\\\frontend\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n\n// Tạo key duy nhất cho sản phẩm + size\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst getCartItemKey = (productId, selectedSize) => {\n  return selectedSize ? `${productId}_${selectedSize.id}` : `${productId}`;\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cartItems, setCartItems] = useState([]);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const {\n    currentUser\n  } = useAuth();\n\n  // Tạo key cho localStorage dựa trên user ID\n  const getCartStorageKey = userId => {\n    return userId ? `cart_user_${userId}` : \"cart_guest\";\n  };\n\n  // Load cart từ localStorage khi component mount hoặc user thay đổi\n  useEffect(() => {\n    loadCartFromStorage();\n  }, [currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n\n  // Save cart vào localStorage khi cartItems thay đổi\n  useEffect(() => {\n    if (isInitialized) {\n      saveCartToStorage();\n    }\n  }, [cartItems, isInitialized, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  const loadCartFromStorage = () => {\n    try {\n      const storageKey = getCartStorageKey(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n      const savedCart = localStorage.getItem(storageKey);\n      console.log(`Loading cart for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"}:`, savedCart);\n      if (savedCart) {\n        const parsedCart = JSON.parse(savedCart);\n\n        // Đảm bảo tương thích với dữ liệu cũ\n        const normalizedCart = parsedCart.map(item => {\n          if (!item.cartKey) {\n            const cartKey = getCartItemKey(item.id, item.selectedSize);\n            return {\n              ...item,\n              cartKey\n            };\n          }\n          return item;\n        });\n        setCartItems(normalizedCart);\n        console.log(`Loaded ${normalizedCart.length} items for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"}`);\n      } else {\n        setCartItems([]);\n        console.log(`No saved cart found for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error loading cart from localStorage:\", error);\n      setCartItems([]);\n    } finally {\n      setIsInitialized(true);\n    }\n  };\n  const saveCartToStorage = () => {\n    try {\n      const storageKey = getCartStorageKey(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n      localStorage.setItem(storageKey, JSON.stringify(cartItems));\n      console.log(`Saved cart for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"}:`, cartItems.length, \"items\");\n    } catch (error) {\n      console.error(\"Error saving cart to localStorage:\", error);\n    }\n  };\n\n  // Migrate cart từ guest sang user khi login\n  const migrateGuestCartToUser = () => {\n    if (!(currentUser !== null && currentUser !== void 0 && currentUser.id)) return;\n    const guestStorageKey = getCartStorageKey(null);\n    const userStorageKey = getCartStorageKey(currentUser.id);\n    try {\n      const guestCart = localStorage.getItem(guestStorageKey);\n      const userCart = localStorage.getItem(userStorageKey);\n      if (guestCart && !userCart) {\n        // Nếu có cart guest và chưa có cart user, migrate cart guest\n        localStorage.setItem(userStorageKey, guestCart);\n        localStorage.removeItem(guestStorageKey);\n        console.log(`Migrated guest cart to user ${currentUser.id}`);\n\n        // Reload cart\n        loadCartFromStorage();\n      } else if (guestCart && userCart) {\n        // Nếu có cả 2, merge carts\n        try {\n          const guestItems = JSON.parse(guestCart);\n          const userItems = JSON.parse(userCart);\n\n          // Merge: thêm guest items vào user cart nếu chưa có\n          const mergedItems = [...userItems];\n          guestItems.forEach(guestItem => {\n            const guestCartKey = guestItem.cartKey || getCartItemKey(guestItem.id, guestItem.selectedSize);\n            const existingItem = mergedItems.find(item => {\n              return (item.cartKey || getCartItemKey(item.id, item.selectedSize)) === guestCartKey;\n            });\n            if (!existingItem) {\n              mergedItems.push(guestItem);\n            } else {\n              // Nếu đã có, cộng thêm quantity\n              existingItem.quantity += guestItem.quantity;\n            }\n          });\n          localStorage.setItem(userStorageKey, JSON.stringify(mergedItems));\n          localStorage.removeItem(guestStorageKey);\n          console.log(`Merged guest cart with user ${currentUser.id} cart`);\n\n          // Reload cart\n          loadCartFromStorage();\n        } catch (mergeError) {\n          console.error(\"Error merging carts:\", mergeError);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error migrating guest cart:\", error);\n    }\n  };\n\n  // Trigger migration khi user login\n  useEffect(() => {\n    if (currentUser !== null && currentUser !== void 0 && currentUser.id && isInitialized) {\n      migrateGuestCartToUser();\n    }\n  }, [currentUser === null || currentUser === void 0 ? void 0 : currentUser.id, isInitialized]);\n  const addToCart = (product, quantity = 1, selectedSize = null) => {\n    console.log(\"Adding to cart:\", product.id, \"quantity:\", quantity, \"size:\", selectedSize, \"for user:\", (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\");\n    setCartItems(prevItems => {\n      const cartKey = getCartItemKey(product.id, selectedSize);\n      const existingItem = prevItems.find(item => {\n        const itemKey = item.cartKey || getCartItemKey(item.id, item.selectedSize);\n        return itemKey === cartKey;\n      });\n      if (existingItem) {\n        console.log(\"Found existing item, updating quantity\");\n        return prevItems.map(item => {\n          const itemKey = item.cartKey || getCartItemKey(item.id, item.selectedSize);\n          return itemKey === cartKey ? {\n            ...item,\n            quantity: item.quantity + quantity\n          } : item;\n        });\n      } else {\n        console.log(\"Adding new item to cart\");\n        return [...prevItems, {\n          ...product,\n          quantity,\n          selectedSize,\n          cartKey\n        }];\n      }\n    });\n  };\n  const removeFromCart = (productId, selectedSize = null) => {\n    const cartKey = getCartItemKey(productId, selectedSize);\n    setCartItems(prevItems => prevItems.filter(item => {\n      const itemKey = item.cartKey || getCartItemKey(item.id, item.selectedSize);\n      return itemKey !== cartKey;\n    }));\n  };\n  const updateQuantity = (productId, quantity, selectedSize = null) => {\n    if (quantity <= 0) {\n      removeFromCart(productId, selectedSize);\n      return;\n    }\n    const cartKey = getCartItemKey(productId, selectedSize);\n    setCartItems(prevItems => prevItems.map(item => {\n      const itemKey = item.cartKey || getCartItemKey(item.id, item.selectedSize);\n      return itemKey === cartKey ? {\n        ...item,\n        quantity\n      } : item;\n    }));\n  };\n\n  // Clear cart - chỉ xóa giỏ hàng hiện tại (sau khi đặt hàng thành công)\n  const clearCart = () => {\n    setCartItems([]);\n    console.log(`Cleared cart for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"}`);\n  };\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n  };\n  const getCartItemsCount = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartItemsCount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 10\n  }, this);\n};\n_s2(CartProvider, \"mqljVnCKrklZDHklYJqJX04S/QQ=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useAuth","jsxDEV","_jsxDEV","CartContext","useCart","_s","getCartItemKey","productId","selectedSize","id","CartProvider","children","_s2","cartItems","setCartItems","isInitialized","setIsInitialized","currentUser","getCartStorageKey","userId","loadCartFromStorage","saveCartToStorage","storageKey","savedCart","localStorage","getItem","console","log","parsedCart","JSON","parse","normalizedCart","map","item","cartKey","length","error","setItem","stringify","migrateGuestCartToUser","guestStorageKey","userStorageKey","guestCart","userCart","removeItem","guestItems","userItems","mergedItems","forEach","guestItem","guestCartKey","existingItem","find","push","quantity","mergeError","addToCart","product","prevItems","itemKey","removeFromCart","filter","updateQuantity","clearCart","getCartTotal","reduce","total","price","getCartItemsCount","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DATT Badminton shop/Thuc-tap-doanh-nghiep/frontend/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from \"react\";\r\nimport { useAuth } from \"./AuthContext\";\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const useCart = () => {\r\n  return useContext(CartContext);\r\n};\r\n\r\n// Tạo key duy nhất cho sản phẩm + size\r\nconst getCartItemKey = (productId, selectedSize) => {\r\n  return selectedSize ? `${productId}_${selectedSize.id}` : `${productId}`;\r\n};\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const { currentUser } = useAuth();\r\n\r\n  // Tạo key cho localStorage dựa trên user ID\r\n  const getCartStorageKey = (userId) => {\r\n    return userId ? `cart_user_${userId}` : \"cart_guest\";\r\n  };\r\n\r\n  // Load cart từ localStorage khi component mount hoặc user thay đổi\r\n  useEffect(() => {\r\n    loadCartFromStorage();\r\n  }, [currentUser?.id]);\r\n\r\n  // Save cart vào localStorage khi cartItems thay đổi\r\n  useEffect(() => {\r\n    if (isInitialized) {\r\n      saveCartToStorage();\r\n    }\r\n  }, [cartItems, isInitialized, currentUser?.id]);\r\n\r\n  const loadCartFromStorage = () => {\r\n    try {\r\n      const storageKey = getCartStorageKey(currentUser?.id);\r\n      const savedCart = localStorage.getItem(storageKey);\r\n\r\n      console.log(\r\n        `Loading cart for user ${currentUser?.id || \"guest\"}:`,\r\n        savedCart\r\n      );\r\n\r\n      if (savedCart) {\r\n        const parsedCart = JSON.parse(savedCart);\r\n\r\n        // Đảm bảo tương thích với dữ liệu cũ\r\n        const normalizedCart = parsedCart.map((item) => {\r\n          if (!item.cartKey) {\r\n            const cartKey = getCartItemKey(item.id, item.selectedSize);\r\n            return { ...item, cartKey };\r\n          }\r\n          return item;\r\n        });\r\n\r\n        setCartItems(normalizedCart);\r\n        console.log(\r\n          `Loaded ${normalizedCart.length} items for user ${\r\n            currentUser?.id || \"guest\"\r\n          }`\r\n        );\r\n      } else {\r\n        setCartItems([]);\r\n        console.log(\r\n          `No saved cart found for user ${currentUser?.id || \"guest\"}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading cart from localStorage:\", error);\r\n      setCartItems([]);\r\n    } finally {\r\n      setIsInitialized(true);\r\n    }\r\n  };\r\n\r\n  const saveCartToStorage = () => {\r\n    try {\r\n      const storageKey = getCartStorageKey(currentUser?.id);\r\n      localStorage.setItem(storageKey, JSON.stringify(cartItems));\r\n      console.log(\r\n        `Saved cart for user ${currentUser?.id || \"guest\"}:`,\r\n        cartItems.length,\r\n        \"items\"\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error saving cart to localStorage:\", error);\r\n    }\r\n  };\r\n\r\n  // Migrate cart từ guest sang user khi login\r\n  const migrateGuestCartToUser = () => {\r\n    if (!currentUser?.id) return;\r\n\r\n    const guestStorageKey = getCartStorageKey(null);\r\n    const userStorageKey = getCartStorageKey(currentUser.id);\r\n\r\n    try {\r\n      const guestCart = localStorage.getItem(guestStorageKey);\r\n      const userCart = localStorage.getItem(userStorageKey);\r\n\r\n      if (guestCart && !userCart) {\r\n        // Nếu có cart guest và chưa có cart user, migrate cart guest\r\n        localStorage.setItem(userStorageKey, guestCart);\r\n        localStorage.removeItem(guestStorageKey);\r\n        console.log(`Migrated guest cart to user ${currentUser.id}`);\r\n\r\n        // Reload cart\r\n        loadCartFromStorage();\r\n      } else if (guestCart && userCart) {\r\n        // Nếu có cả 2, merge carts\r\n        try {\r\n          const guestItems = JSON.parse(guestCart);\r\n          const userItems = JSON.parse(userCart);\r\n\r\n          // Merge: thêm guest items vào user cart nếu chưa có\r\n          const mergedItems = [...userItems];\r\n\r\n          guestItems.forEach((guestItem) => {\r\n            const guestCartKey =\r\n              guestItem.cartKey ||\r\n              getCartItemKey(guestItem.id, guestItem.selectedSize);\r\n            const existingItem = mergedItems.find((item) => {\r\n              return (\r\n                (item.cartKey || getCartItemKey(item.id, item.selectedSize)) ===\r\n                guestCartKey\r\n              );\r\n            });\r\n\r\n            if (!existingItem) {\r\n              mergedItems.push(guestItem);\r\n            } else {\r\n              // Nếu đã có, cộng thêm quantity\r\n              existingItem.quantity += guestItem.quantity;\r\n            }\r\n          });\r\n\r\n          localStorage.setItem(userStorageKey, JSON.stringify(mergedItems));\r\n          localStorage.removeItem(guestStorageKey);\r\n          console.log(`Merged guest cart with user ${currentUser.id} cart`);\r\n\r\n          // Reload cart\r\n          loadCartFromStorage();\r\n        } catch (mergeError) {\r\n          console.error(\"Error merging carts:\", mergeError);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error migrating guest cart:\", error);\r\n    }\r\n  };\r\n\r\n  // Trigger migration khi user login\r\n  useEffect(() => {\r\n    if (currentUser?.id && isInitialized) {\r\n      migrateGuestCartToUser();\r\n    }\r\n  }, [currentUser?.id, isInitialized]);\r\n\r\n  const addToCart = (product, quantity = 1, selectedSize = null) => {\r\n    console.log(\r\n      \"Adding to cart:\",\r\n      product.id,\r\n      \"quantity:\",\r\n      quantity,\r\n      \"size:\",\r\n      selectedSize,\r\n      \"for user:\",\r\n      currentUser?.id || \"guest\"\r\n    );\r\n\r\n    setCartItems((prevItems) => {\r\n      const cartKey = getCartItemKey(product.id, selectedSize);\r\n\r\n      const existingItem = prevItems.find((item) => {\r\n        const itemKey =\r\n          item.cartKey || getCartItemKey(item.id, item.selectedSize);\r\n        return itemKey === cartKey;\r\n      });\r\n\r\n      if (existingItem) {\r\n        console.log(\"Found existing item, updating quantity\");\r\n        return prevItems.map((item) => {\r\n          const itemKey =\r\n            item.cartKey || getCartItemKey(item.id, item.selectedSize);\r\n          return itemKey === cartKey\r\n            ? { ...item, quantity: item.quantity + quantity }\r\n            : item;\r\n        });\r\n      } else {\r\n        console.log(\"Adding new item to cart\");\r\n        return [\r\n          ...prevItems,\r\n          {\r\n            ...product,\r\n            quantity,\r\n            selectedSize,\r\n            cartKey,\r\n          },\r\n        ];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (productId, selectedSize = null) => {\r\n    const cartKey = getCartItemKey(productId, selectedSize);\r\n    setCartItems((prevItems) =>\r\n      prevItems.filter((item) => {\r\n        const itemKey =\r\n          item.cartKey || getCartItemKey(item.id, item.selectedSize);\r\n        return itemKey !== cartKey;\r\n      })\r\n    );\r\n  };\r\n\r\n  const updateQuantity = (productId, quantity, selectedSize = null) => {\r\n    if (quantity <= 0) {\r\n      removeFromCart(productId, selectedSize);\r\n      return;\r\n    }\r\n\r\n    const cartKey = getCartItemKey(productId, selectedSize);\r\n    setCartItems((prevItems) =>\r\n      prevItems.map((item) => {\r\n        const itemKey =\r\n          item.cartKey || getCartItemKey(item.id, item.selectedSize);\r\n        return itemKey === cartKey ? { ...item, quantity } : item;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Clear cart - chỉ xóa giỏ hàng hiện tại (sau khi đặt hàng thành công)\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n    console.log(`Cleared cart for user ${currentUser?.id || \"guest\"}`);\r\n  };\r\n\r\n  const getCartTotal = () => {\r\n    return cartItems.reduce(\r\n      (total, item) => total + item.price * item.quantity,\r\n      0\r\n    );\r\n  };\r\n\r\n  const getCartItemsCount = () => {\r\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\r\n  };\r\n\r\n  const value = {\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    getCartTotal,\r\n    getCartItemsCount,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}