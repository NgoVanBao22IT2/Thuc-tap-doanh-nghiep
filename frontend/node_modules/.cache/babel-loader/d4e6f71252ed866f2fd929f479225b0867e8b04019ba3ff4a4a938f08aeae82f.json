{"ast":null,"code":"const express = require(\"express\");\nconst db = require(\"../config/database\");\nconst {\n  verifyToken,\n  verifyAdmin\n} = require(\"../middleware/auth\");\nconst router = express.Router();\n\n/**\r\n * Lấy toàn bộ size\r\n */\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const [rows] = await db.query(\"SELECT * FROM sizes ORDER BY id ASC\");\n    res.json(rows);\n  } catch (err) {\n    console.error(\"Error fetching sizes:\", err);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n/**\r\n * Lấy size theo id\r\n */\nrouter.get(\"/:id\", async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const [rows] = await db.query(\"SELECT * FROM sizes WHERE id = ?\", [id]);\n    if (rows.length === 0) return res.status(404).json({\n      message: \"Size not found\"\n    });\n    res.json(rows[0]);\n  } catch (err) {\n    console.error(\"Error fetching size:\", err);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n/**\r\n * Gán size cho product (tạo/cập nhật tồn kho)\r\n */\nrouter.post(\"/product\", verifyToken, verifyAdmin, async (req, res) => {\n  const {\n    product_id,\n    size_id,\n    stock_quantity\n  } = req.body;\n  try {\n    await db.query(`INSERT INTO product_sizes (product_id, size_id, stock_quantity)\n       VALUES (?, ?, ?)\n       ON DUPLICATE KEY UPDATE stock_quantity = ?`, [product_id, size_id, stock_quantity, stock_quantity]);\n    res.json({\n      message: \"Product size updated successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error updating product size:\", error);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n/**\r\n * Lấy size theo category_type\r\n */\nrouter.get(\"/category/:type\", async (req, res) => {\n  const {\n    type\n  } = req.params;\n  try {\n    const [rows] = await db.query(\"SELECT * FROM sizes WHERE category_type = ? ORDER BY sort_order ASC\", [type]);\n    if (rows.length === 0) {\n      return res.status(404).json({\n        message: \"No sizes found for this category\"\n      });\n    }\n    res.json(rows);\n  } catch (error) {\n    console.error(\"Error fetching sizes by category:\", error);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n/**\r\n * Lấy size + tồn kho của một product\r\n */\nrouter.get(\"/product/:productId\", async (req, res) => {\n  const {\n    productId\n  } = req.params;\n  try {\n    const [rows] = await db.query(`SELECT ps.size_id, s.name, ps.stock_quantity\n       FROM product_sizes ps\n       JOIN sizes s ON ps.size_id = s.id\n       WHERE ps.product_id = ?`, [productId]);\n    res.json(rows);\n  } catch (error) {\n    console.error(\"Error fetching product sizes:\", error);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n/**\r\n * Tạo size mới (Admin)\r\n */\nrouter.post(\"/\", verifyToken, verifyAdmin, async (req, res) => {\n  const {\n    name,\n    category_type,\n    sort_order,\n    description,\n    status\n  } = req.body;\n  try {\n    const [result] = await db.query(\"INSERT INTO sizes (name, category_type, sort_order, description, status) VALUES (?, ?, ?, ?, ?)\", [name, category_type, sort_order, description || null, status !== null && status !== void 0 ? status : 1]);\n    res.status(201).json({\n      message: \"Size created successfully\",\n      id: result.insertId\n    });\n  } catch (error) {\n    console.error(\"Error creating size:\", error);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n/**\r\n * Cập nhật size (Admin)\r\n */\nrouter.put(\"/:id\", verifyToken, verifyAdmin, async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const {\n    name,\n    category_type,\n    sort_order,\n    description,\n    status\n  } = req.body;\n  try {\n    const [result] = await db.query(\"UPDATE sizes SET name = ?, category_type = ?, sort_order = ?, description = ?, status = ? WHERE id = ?\", [name, category_type, sort_order, description || null, status !== null && status !== void 0 ? status : 1, id]);\n    if (result.affectedRows === 0) {\n      return res.status(404).json({\n        message: \"Size not found\"\n      });\n    }\n    res.json({\n      message: \"Size updated successfully\"\n    });\n  } catch (err) {\n    console.error(\"Error updating size:\", err);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\n\n/**\r\n * Xóa size (Admin)\r\n */\nrouter.delete(\"/:id\", verifyToken, verifyAdmin, async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const [result] = await db.query(\"DELETE FROM sizes WHERE id = ?\", [id]);\n    if (result.affectedRows === 0) {\n      return res.status(404).json({\n        message: \"Size not found\"\n      });\n    }\n    res.json({\n      message: \"Size deleted successfully\"\n    });\n  } catch (err) {\n    console.error(\"Error deleting size:\", err);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","db","verifyToken","verifyAdmin","router","Router","get","req","res","rows","query","json","err","console","error","status","message","id","params","length","post","product_id","size_id","stock_quantity","body","type","productId","name","category_type","sort_order","description","result","insertId","put","affectedRows","delete","module","exports"],"sources":["D:/DATT Badminton shop/Thuc-tap-doanh-nghiep/frontend/src/pages/admin/AdminSizes.js"],"sourcesContent":["const express = require(\"express\");\r\nconst db = require(\"../config/database\");\r\nconst { verifyToken, verifyAdmin } = require(\"../middleware/auth\");\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * Lấy toàn bộ size\r\n */\r\nrouter.get(\"/\", async (req, res) => {\r\n  try {\r\n    const [rows] = await db.query(\"SELECT * FROM sizes ORDER BY id ASC\");\r\n    res.json(rows);\r\n  } catch (err) {\r\n    console.error(\"Error fetching sizes:\", err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * Lấy size theo id\r\n */\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const [rows] = await db.query(\"SELECT * FROM sizes WHERE id = ?\", [id]);\r\n    if (rows.length === 0)\r\n      return res.status(404).json({ message: \"Size not found\" });\r\n    res.json(rows[0]);\r\n  } catch (err) {\r\n    console.error(\"Error fetching size:\", err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * Gán size cho product (tạo/cập nhật tồn kho)\r\n */\r\nrouter.post(\"/product\", verifyToken, verifyAdmin, async (req, res) => {\r\n  const { product_id, size_id, stock_quantity } = req.body;\r\n\r\n  try {\r\n    await db.query(\r\n      `INSERT INTO product_sizes (product_id, size_id, stock_quantity)\r\n       VALUES (?, ?, ?)\r\n       ON DUPLICATE KEY UPDATE stock_quantity = ?`,\r\n      [product_id, size_id, stock_quantity, stock_quantity]\r\n    );\r\n    res.json({ message: \"Product size updated successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error updating product size:\", error);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * Lấy size theo category_type\r\n */\r\nrouter.get(\"/category/:type\", async (req, res) => {\r\n  const { type } = req.params;\r\n\r\n  try {\r\n    const [rows] = await db.query(\r\n      \"SELECT * FROM sizes WHERE category_type = ? ORDER BY sort_order ASC\",\r\n      [type]\r\n    );\r\n\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ message: \"No sizes found for this category\" });\r\n    }\r\n\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error(\"Error fetching sizes by category:\", error);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * Lấy size + tồn kho của một product\r\n */\r\nrouter.get(\"/product/:productId\", async (req, res) => {\r\n  const { productId } = req.params;\r\n\r\n  try {\r\n    const [rows] = await db.query(\r\n      `SELECT ps.size_id, s.name, ps.stock_quantity\r\n       FROM product_sizes ps\r\n       JOIN sizes s ON ps.size_id = s.id\r\n       WHERE ps.product_id = ?`,\r\n      [productId]\r\n    );\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error(\"Error fetching product sizes:\", error);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * Tạo size mới (Admin)\r\n */\r\nrouter.post(\"/\", verifyToken, verifyAdmin, async (req, res) => {\r\n  const { name, category_type, sort_order, description, status } = req.body;\r\n\r\n  try {\r\n    const [result] = await db.query(\r\n      \"INSERT INTO sizes (name, category_type, sort_order, description, status) VALUES (?, ?, ?, ?, ?)\",\r\n      [name, category_type, sort_order, description || null, status ?? 1]\r\n    );\r\n    res\r\n      .status(201)\r\n      .json({ message: \"Size created successfully\", id: result.insertId });\r\n  } catch (error) {\r\n    console.error(\"Error creating size:\", error);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * Cập nhật size (Admin)\r\n */\r\nrouter.put(\"/:id\", verifyToken, verifyAdmin, async (req, res) => {\r\n  const { id } = req.params;\r\n  const { name, category_type, sort_order, description, status } = req.body;\r\n\r\n  try {\r\n    const [result] = await db.query(\r\n      \"UPDATE sizes SET name = ?, category_type = ?, sort_order = ?, description = ?, status = ? WHERE id = ?\",\r\n      [name, category_type, sort_order, description || null, status ?? 1, id]\r\n    );\r\n\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ message: \"Size not found\" });\r\n    }\r\n\r\n    res.json({ message: \"Size updated successfully\" });\r\n  } catch (err) {\r\n    console.error(\"Error updating size:\", err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\n/**\r\n * Xóa size (Admin)\r\n */\r\nrouter.delete(\"/:id\", verifyToken, verifyAdmin, async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const [result] = await db.query(\"DELETE FROM sizes WHERE id = ?\", [id]);\r\n\r\n    if (result.affectedRows === 0) {\r\n      return res.status(404).json({ message: \"Size not found\" });\r\n    }\r\n\r\n    res.json({ message: \"Size deleted successfully\" });\r\n  } catch (err) {\r\n    console.error(\"Error deleting size:\", err);\r\n    res.status(500).json({ message: \"Server error\" });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}