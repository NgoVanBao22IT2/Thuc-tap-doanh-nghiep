{"ast":null,"code":"var _jsxFileName = \"D:\\\\DATT Badminton shop\\\\Thuc-tap-doanh-nghiep\\\\frontend\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n\n// Tạo key duy nhất cho sản phẩm + size\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst getCartItemKey = (productId, selectedSize) => {\n  return selectedSize ? `${productId}_${selectedSize.id}` : `${productId}`;\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cartItems, setCartItems] = useState([]);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const {\n    currentUser\n  } = useAuth();\n\n  // Tạo key cho localStorage dựa trên user ID\n  const getCartStorageKey = userId => {\n    return userId ? `cart_user_${userId}` : \"cart_guest\";\n  };\n\n  // Load cart từ localStorage khi component mount hoặc user thay đổi\n  useEffect(() => {\n    console.log(\"User changed, loading cart for:\", (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\");\n    loadCartFromStorage();\n  }, [currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n\n  // Save cart vào localStorage khi cartItems thay đổi\n  useEffect(() => {\n    if (isInitialized) {\n      saveCartToStorage();\n    }\n  }, [cartItems, isInitialized, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  const loadCartFromStorage = () => {\n    try {\n      const storageKey = getCartStorageKey(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n      const savedCart = localStorage.getItem(storageKey);\n      console.log(`Loading cart for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"}:`, savedCart ? `Found ${JSON.parse(savedCart).length} items` : \"No cart found\");\n      if (savedCart) {\n        const parsedCart = JSON.parse(savedCart);\n\n        // Đảm bảo tương thích với dữ liệu cũ\n        const normalizedCart = parsedCart.map(item => {\n          if (!item.cartKey) {\n            const cartKey = getCartItemKey(item.id, item.selectedSize);\n            return {\n              ...item,\n              cartKey\n            };\n          }\n          return item;\n        });\n        setCartItems(normalizedCart);\n        console.log(`Successfully loaded ${normalizedCart.length} items for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"}`);\n      } else {\n        // Không có cart đã lưu - bắt đầu với cart rỗng\n        setCartItems([]);\n        console.log(`No saved cart found for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"} - starting with empty cart`);\n      }\n    } catch (error) {\n      console.error(\"Error loading cart from localStorage:\", error);\n      setCartItems([]);\n    } finally {\n      setIsInitialized(true);\n    }\n  };\n  const saveCartToStorage = () => {\n    try {\n      const storageKey = getCartStorageKey(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id);\n      localStorage.setItem(storageKey, JSON.stringify(cartItems));\n      console.log(`Cart saved for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"}:`, cartItems.length, \"items\");\n    } catch (error) {\n      console.error(\"Error saving cart to localStorage:\", error);\n    }\n  };\n\n  // Migrate cart từ guest sang user KHI LOGIN (không chạy khi logout)\n  const migrateGuestCartToUser = () => {\n    if (!(currentUser !== null && currentUser !== void 0 && currentUser.id)) {\n      console.log(\"No user to migrate to, skipping migration\");\n      return;\n    }\n    const guestStorageKey = getCartStorageKey(null);\n    const userStorageKey = getCartStorageKey(currentUser.id);\n    try {\n      const guestCart = localStorage.getItem(guestStorageKey);\n      const userCart = localStorage.getItem(userStorageKey);\n      console.log(\"Migration check:\", {\n        hasGuestCart: !!guestCart,\n        hasUserCart: !!userCart,\n        userId: currentUser.id,\n        guestItems: guestCart ? JSON.parse(guestCart).length : 0,\n        userItems: userCart ? JSON.parse(userCart).length : 0\n      });\n      if (guestCart && !userCart) {\n        // Case 1: Có guest cart, chưa có user cart -> Migrate toàn bộ\n        localStorage.setItem(userStorageKey, guestCart);\n        localStorage.removeItem(guestStorageKey);\n        console.log(`✅ Migrated guest cart to user ${currentUser.id}`);\n        loadCartFromStorage(); // Reload để hiển thị cart đã migrate\n      } else if (guestCart && userCart) {\n        // Case 2: Có cả guest cart và user cart -> Merge\n        try {\n          const guestItems = JSON.parse(guestCart);\n          const userItems = JSON.parse(userCart);\n          console.log(`🔄 Merging carts: ${guestItems.length} guest + ${userItems.length} user items`);\n          const mergedItems = [...userItems];\n          guestItems.forEach(guestItem => {\n            const guestCartKey = guestItem.cartKey || getCartItemKey(guestItem.id, guestItem.selectedSize);\n            const existingItem = mergedItems.find(item => (item.cartKey || getCartItemKey(item.id, item.selectedSize)) === guestCartKey);\n            if (!existingItem) {\n              var _guestItem$selectedSi;\n              // Sản phẩm chưa có trong user cart -> Thêm mới\n              mergedItems.push(guestItem);\n              console.log(`➕ Added new item: ${guestItem.name} ${((_guestItem$selectedSi = guestItem.selectedSize) === null || _guestItem$selectedSi === void 0 ? void 0 : _guestItem$selectedSi.name) || \"\"}`);\n            } else {\n              var _guestItem$selectedSi2;\n              // Sản phẩm đã có -> Cộng dồn quantity\n              existingItem.quantity += guestItem.quantity;\n              console.log(`🔢 Merged quantities for: ${guestItem.name} ${((_guestItem$selectedSi2 = guestItem.selectedSize) === null || _guestItem$selectedSi2 === void 0 ? void 0 : _guestItem$selectedSi2.name) || \"\"}`);\n            }\n          });\n          localStorage.setItem(userStorageKey, JSON.stringify(mergedItems));\n          localStorage.removeItem(guestStorageKey);\n          console.log(`✅ Merged cart completed: ${mergedItems.length} total items`);\n          loadCartFromStorage(); // Reload để hiển thị cart đã merge\n        } catch (mergeError) {\n          console.error(\"❌ Error merging carts:\", mergeError);\n        }\n      } else if (userCart) {\n        // Case 3: Chỉ có user cart -> Không cần migrate, chỉ remove guest cart\n        if (guestCart) localStorage.removeItem(guestStorageKey);\n        console.log(`✅ User cart loaded, guest cart cleared`);\n      } else {\n        // Case 4: Không có cart nào -> Không cần làm gì\n        console.log(`ℹ️ No carts to migrate`);\n      }\n    } catch (error) {\n      console.error(\"❌ Error migrating guest cart:\", error);\n    }\n  };\n\n  // Track user changes để chỉ migrate khi login (không migrate khi logout)\n  const [previousUserId, setPreviousUserId] = useState(undefined);\n  useEffect(() => {\n    if (isInitialized) {\n      const currentUserId = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || null;\n      console.log(\"User state change:\", {\n        previousUserId,\n        currentUserId,\n        isLogin: !previousUserId && currentUserId,\n        isLogout: previousUserId && !currentUserId,\n        isSwitchUser: previousUserId && currentUserId && previousUserId !== currentUserId\n      });\n\n      // CHỈ migrate khi:\n      // 1. User login (từ guest thành có user)\n      // 2. User switch (từ user này sang user khác)\n      if (!previousUserId && currentUserId || previousUserId && currentUserId && previousUserId !== currentUserId) {\n        console.log(\"🔄 Triggering cart migration...\");\n        setTimeout(() => {\n          migrateGuestCartToUser();\n        }, 100); // Delay nhỏ để đảm bảo loadCartFromStorage đã hoàn thành\n      }\n\n      // KHÔNG làm gì khi logout (previousUserId && !currentUserId)\n      // Cart của user đã được lưu và sẽ được load lại khi login\n\n      setPreviousUserId(currentUserId);\n    }\n  }, [currentUser === null || currentUser === void 0 ? void 0 : currentUser.id, isInitialized]);\n  const addToCart = (product, quantity = 1, selectedSize = null) => {\n    console.log(\"Adding to cart:\", product.id, \"quantity:\", quantity, \"size:\", selectedSize, \"for user:\", (currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\");\n    setCartItems(prevItems => {\n      const cartKey = getCartItemKey(product.id, selectedSize);\n      const existingItem = prevItems.find(item => {\n        const itemKey = item.cartKey || getCartItemKey(item.id, item.selectedSize);\n        return itemKey === cartKey;\n      });\n      if (existingItem) {\n        console.log(\"Found existing item, updating quantity\");\n        return prevItems.map(item => {\n          const itemKey = item.cartKey || getCartItemKey(item.id, item.selectedSize);\n          return itemKey === cartKey ? {\n            ...item,\n            quantity: item.quantity + quantity\n          } : item;\n        });\n      } else {\n        console.log(\"Adding new item to cart\");\n        return [...prevItems, {\n          ...product,\n          quantity,\n          selectedSize,\n          cartKey\n        }];\n      }\n    });\n  };\n  const removeFromCart = (productId, selectedSize = null) => {\n    const cartKey = getCartItemKey(productId, selectedSize);\n    setCartItems(prevItems => prevItems.filter(item => {\n      const itemKey = item.cartKey || getCartItemKey(item.id, item.selectedSize);\n      return itemKey !== cartKey;\n    }));\n  };\n  const updateQuantity = (productId, quantity, selectedSize = null) => {\n    if (quantity <= 0) {\n      removeFromCart(productId, selectedSize);\n      return;\n    }\n    const cartKey = getCartItemKey(productId, selectedSize);\n    setCartItems(prevItems => prevItems.map(item => {\n      const itemKey = item.cartKey || getCartItemKey(item.id, item.selectedSize);\n      return itemKey === cartKey ? {\n        ...item,\n        quantity\n      } : item;\n    }));\n  };\n\n  // Clear cart - CHỈ sau khi đặt hàng thành công\n  const clearCart = () => {\n    setCartItems([]);\n    console.log(`🛒 Cart cleared for user ${(currentUser === null || currentUser === void 0 ? void 0 : currentUser.id) || \"guest\"} after successful order`);\n  };\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n  };\n  const getCartItemsCount = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartItemsCount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 10\n  }, this);\n};\n_s2(CartProvider, \"Gspek1faB0U7l+yo6PUepdCO8V8=\", false, function () {\n  return [useAuth];\n});\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useAuth","jsxDEV","_jsxDEV","CartContext","useCart","_s","getCartItemKey","productId","selectedSize","id","CartProvider","children","_s2","cartItems","setCartItems","isInitialized","setIsInitialized","currentUser","getCartStorageKey","userId","console","log","loadCartFromStorage","saveCartToStorage","storageKey","savedCart","localStorage","getItem","JSON","parse","length","parsedCart","normalizedCart","map","item","cartKey","error","setItem","stringify","migrateGuestCartToUser","guestStorageKey","userStorageKey","guestCart","userCart","hasGuestCart","hasUserCart","guestItems","userItems","removeItem","mergedItems","forEach","guestItem","guestCartKey","existingItem","find","_guestItem$selectedSi","push","name","_guestItem$selectedSi2","quantity","mergeError","previousUserId","setPreviousUserId","undefined","currentUserId","isLogin","isLogout","isSwitchUser","setTimeout","addToCart","product","prevItems","itemKey","removeFromCart","filter","updateQuantity","clearCart","getCartTotal","reduce","total","price","getCartItemsCount","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DATT Badminton shop/Thuc-tap-doanh-nghiep/frontend/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from \"react\";\r\nimport { useAuth } from \"./AuthContext\";\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const useCart = () => {\r\n  return useContext(CartContext);\r\n};\r\n\r\n// Tạo key duy nhất cho sản phẩm + size\r\nconst getCartItemKey = (productId, selectedSize) => {\r\n  return selectedSize ? `${productId}_${selectedSize.id}` : `${productId}`;\r\n};\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const { currentUser } = useAuth();\r\n\r\n  // Tạo key cho localStorage dựa trên user ID\r\n  const getCartStorageKey = (userId) => {\r\n    return userId ? `cart_user_${userId}` : \"cart_guest\";\r\n  };\r\n\r\n  // Load cart từ localStorage khi component mount hoặc user thay đổi\r\n  useEffect(() => {\r\n    console.log(\"User changed, loading cart for:\", currentUser?.id || \"guest\");\r\n    loadCartFromStorage();\r\n  }, [currentUser?.id]);\r\n\r\n  // Save cart vào localStorage khi cartItems thay đổi\r\n  useEffect(() => {\r\n    if (isInitialized) {\r\n      saveCartToStorage();\r\n    }\r\n  }, [cartItems, isInitialized, currentUser?.id]);\r\n\r\n  const loadCartFromStorage = () => {\r\n    try {\r\n      const storageKey = getCartStorageKey(currentUser?.id);\r\n      const savedCart = localStorage.getItem(storageKey);\r\n\r\n      console.log(\r\n        `Loading cart for user ${currentUser?.id || \"guest\"}:`,\r\n        savedCart\r\n          ? `Found ${JSON.parse(savedCart).length} items`\r\n          : \"No cart found\"\r\n      );\r\n\r\n      if (savedCart) {\r\n        const parsedCart = JSON.parse(savedCart);\r\n\r\n        // Đảm bảo tương thích với dữ liệu cũ\r\n        const normalizedCart = parsedCart.map((item) => {\r\n          if (!item.cartKey) {\r\n            const cartKey = getCartItemKey(item.id, item.selectedSize);\r\n            return { ...item, cartKey };\r\n          }\r\n          return item;\r\n        });\r\n\r\n        setCartItems(normalizedCart);\r\n        console.log(\r\n          `Successfully loaded ${normalizedCart.length} items for user ${\r\n            currentUser?.id || \"guest\"\r\n          }`\r\n        );\r\n      } else {\r\n        // Không có cart đã lưu - bắt đầu với cart rỗng\r\n        setCartItems([]);\r\n        console.log(\r\n          `No saved cart found for user ${\r\n            currentUser?.id || \"guest\"\r\n          } - starting with empty cart`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading cart from localStorage:\", error);\r\n      setCartItems([]);\r\n    } finally {\r\n      setIsInitialized(true);\r\n    }\r\n  };\r\n\r\n  const saveCartToStorage = () => {\r\n    try {\r\n      const storageKey = getCartStorageKey(currentUser?.id);\r\n      localStorage.setItem(storageKey, JSON.stringify(cartItems));\r\n      console.log(\r\n        `Cart saved for user ${currentUser?.id || \"guest\"}:`,\r\n        cartItems.length,\r\n        \"items\"\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error saving cart to localStorage:\", error);\r\n    }\r\n  };\r\n\r\n  // Migrate cart từ guest sang user KHI LOGIN (không chạy khi logout)\r\n  const migrateGuestCartToUser = () => {\r\n    if (!currentUser?.id) {\r\n      console.log(\"No user to migrate to, skipping migration\");\r\n      return;\r\n    }\r\n\r\n    const guestStorageKey = getCartStorageKey(null);\r\n    const userStorageKey = getCartStorageKey(currentUser.id);\r\n\r\n    try {\r\n      const guestCart = localStorage.getItem(guestStorageKey);\r\n      const userCart = localStorage.getItem(userStorageKey);\r\n\r\n      console.log(\"Migration check:\", {\r\n        hasGuestCart: !!guestCart,\r\n        hasUserCart: !!userCart,\r\n        userId: currentUser.id,\r\n        guestItems: guestCart ? JSON.parse(guestCart).length : 0,\r\n        userItems: userCart ? JSON.parse(userCart).length : 0,\r\n      });\r\n\r\n      if (guestCart && !userCart) {\r\n        // Case 1: Có guest cart, chưa có user cart -> Migrate toàn bộ\r\n        localStorage.setItem(userStorageKey, guestCart);\r\n        localStorage.removeItem(guestStorageKey);\r\n        console.log(`✅ Migrated guest cart to user ${currentUser.id}`);\r\n        loadCartFromStorage(); // Reload để hiển thị cart đã migrate\r\n      } else if (guestCart && userCart) {\r\n        // Case 2: Có cả guest cart và user cart -> Merge\r\n        try {\r\n          const guestItems = JSON.parse(guestCart);\r\n          const userItems = JSON.parse(userCart);\r\n\r\n          console.log(\r\n            `🔄 Merging carts: ${guestItems.length} guest + ${userItems.length} user items`\r\n          );\r\n\r\n          const mergedItems = [...userItems];\r\n\r\n          guestItems.forEach((guestItem) => {\r\n            const guestCartKey =\r\n              guestItem.cartKey ||\r\n              getCartItemKey(guestItem.id, guestItem.selectedSize);\r\n            const existingItem = mergedItems.find(\r\n              (item) =>\r\n                (item.cartKey || getCartItemKey(item.id, item.selectedSize)) ===\r\n                guestCartKey\r\n            );\r\n\r\n            if (!existingItem) {\r\n              // Sản phẩm chưa có trong user cart -> Thêm mới\r\n              mergedItems.push(guestItem);\r\n              console.log(\r\n                `➕ Added new item: ${guestItem.name} ${\r\n                  guestItem.selectedSize?.name || \"\"\r\n                }`\r\n              );\r\n            } else {\r\n              // Sản phẩm đã có -> Cộng dồn quantity\r\n              existingItem.quantity += guestItem.quantity;\r\n              console.log(\r\n                `🔢 Merged quantities for: ${guestItem.name} ${\r\n                  guestItem.selectedSize?.name || \"\"\r\n                }`\r\n              );\r\n            }\r\n          });\r\n\r\n          localStorage.setItem(userStorageKey, JSON.stringify(mergedItems));\r\n          localStorage.removeItem(guestStorageKey);\r\n          console.log(\r\n            `✅ Merged cart completed: ${mergedItems.length} total items`\r\n          );\r\n          loadCartFromStorage(); // Reload để hiển thị cart đã merge\r\n        } catch (mergeError) {\r\n          console.error(\"❌ Error merging carts:\", mergeError);\r\n        }\r\n      } else if (userCart) {\r\n        // Case 3: Chỉ có user cart -> Không cần migrate, chỉ remove guest cart\r\n        if (guestCart) localStorage.removeItem(guestStorageKey);\r\n        console.log(`✅ User cart loaded, guest cart cleared`);\r\n      } else {\r\n        // Case 4: Không có cart nào -> Không cần làm gì\r\n        console.log(`ℹ️ No carts to migrate`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ Error migrating guest cart:\", error);\r\n    }\r\n  };\r\n\r\n  // Track user changes để chỉ migrate khi login (không migrate khi logout)\r\n  const [previousUserId, setPreviousUserId] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (isInitialized) {\r\n      const currentUserId = currentUser?.id || null;\r\n\r\n      console.log(\"User state change:\", {\r\n        previousUserId,\r\n        currentUserId,\r\n        isLogin: !previousUserId && currentUserId,\r\n        isLogout: previousUserId && !currentUserId,\r\n        isSwitchUser:\r\n          previousUserId && currentUserId && previousUserId !== currentUserId,\r\n      });\r\n\r\n      // CHỈ migrate khi:\r\n      // 1. User login (từ guest thành có user)\r\n      // 2. User switch (từ user này sang user khác)\r\n      if (\r\n        (!previousUserId && currentUserId) ||\r\n        (previousUserId && currentUserId && previousUserId !== currentUserId)\r\n      ) {\r\n        console.log(\"🔄 Triggering cart migration...\");\r\n        setTimeout(() => {\r\n          migrateGuestCartToUser();\r\n        }, 100); // Delay nhỏ để đảm bảo loadCartFromStorage đã hoàn thành\r\n      }\r\n\r\n      // KHÔNG làm gì khi logout (previousUserId && !currentUserId)\r\n      // Cart của user đã được lưu và sẽ được load lại khi login\r\n\r\n      setPreviousUserId(currentUserId);\r\n    }\r\n  }, [currentUser?.id, isInitialized]);\r\n\r\n  const addToCart = (product, quantity = 1, selectedSize = null) => {\r\n    console.log(\r\n      \"Adding to cart:\",\r\n      product.id,\r\n      \"quantity:\",\r\n      quantity,\r\n      \"size:\",\r\n      selectedSize,\r\n      \"for user:\",\r\n      currentUser?.id || \"guest\"\r\n    );\r\n\r\n    setCartItems((prevItems) => {\r\n      const cartKey = getCartItemKey(product.id, selectedSize);\r\n\r\n      const existingItem = prevItems.find((item) => {\r\n        const itemKey =\r\n          item.cartKey || getCartItemKey(item.id, item.selectedSize);\r\n        return itemKey === cartKey;\r\n      });\r\n\r\n      if (existingItem) {\r\n        console.log(\"Found existing item, updating quantity\");\r\n        return prevItems.map((item) => {\r\n          const itemKey =\r\n            item.cartKey || getCartItemKey(item.id, item.selectedSize);\r\n          return itemKey === cartKey\r\n            ? { ...item, quantity: item.quantity + quantity }\r\n            : item;\r\n        });\r\n      } else {\r\n        console.log(\"Adding new item to cart\");\r\n        return [\r\n          ...prevItems,\r\n          {\r\n            ...product,\r\n            quantity,\r\n            selectedSize,\r\n            cartKey,\r\n          },\r\n        ];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (productId, selectedSize = null) => {\r\n    const cartKey = getCartItemKey(productId, selectedSize);\r\n    setCartItems((prevItems) =>\r\n      prevItems.filter((item) => {\r\n        const itemKey =\r\n          item.cartKey || getCartItemKey(item.id, item.selectedSize);\r\n        return itemKey !== cartKey;\r\n      })\r\n    );\r\n  };\r\n\r\n  const updateQuantity = (productId, quantity, selectedSize = null) => {\r\n    if (quantity <= 0) {\r\n      removeFromCart(productId, selectedSize);\r\n      return;\r\n    }\r\n\r\n    const cartKey = getCartItemKey(productId, selectedSize);\r\n    setCartItems((prevItems) =>\r\n      prevItems.map((item) => {\r\n        const itemKey =\r\n          item.cartKey || getCartItemKey(item.id, item.selectedSize);\r\n        return itemKey === cartKey ? { ...item, quantity } : item;\r\n      })\r\n    );\r\n  };\r\n\r\n  // Clear cart - CHỈ sau khi đặt hàng thành công\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n    console.log(\r\n      `🛒 Cart cleared for user ${\r\n        currentUser?.id || \"guest\"\r\n      } after successful order`\r\n    );\r\n  };\r\n\r\n  const getCartTotal = () => {\r\n    return cartItems.reduce(\r\n      (total, item) => total + item.price * item.quantity,\r\n      0\r\n    );\r\n  };\r\n\r\n  const getCartItemsCount = () => {\r\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\r\n  };\r\n\r\n  const value = {\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    getCartTotal,\r\n    getCartItemsCount,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}